<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Gun_In_Use = noone;

sprite_index_Right_Gun_In_Use_Equipped = noone;

sprite_index_Left_Gun_In_Use_Equipped = noone;

sprite_index_Gun_In_Use_Pick_Up = noone;

potato_gun_bullet_timer = true;

correction = noone;

correction_2 = noone;

ammo = noone;

gun_type = noone;

bullet = noone;

bullet_speed = noone;

casings = noone;

alarm_timer = noone;

cool_down = noone;

shooting_sound = noone;

ldx = noone;

ldy = noone;

gun_charging_animation_left = noone;

gun_charging_animation_right = noone;

charging_speed = noone;

charging_sound = noone;

index_size = noone;

//1 equals single fire (handgun, beretta, sniper)
//2 equals burst fire (AR15)
//3 equals automatic (P90)
//4 laser weapon (laster)

//////////////////////////////////////////////////////

gun_collision = false;

weapon_picked_up = false;

equipped = false;

equip_text_box = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.object_bullet_3 = instance_create(x, y, bullet);
audio_play_sound(shooting_sound, 1, 0);
other.object_bullet_3.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
other.object_bullet_3.speed = bullet_speed;
instance_create(x + ldx, y + ldy, gun_flash);
instance_create(x, y, casings);
other.potato_gun_bullet_timer = false;
alarm[0] = cool_down;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.object_bullet_2 = instance_create(x, y, bullet);
audio_play_sound(shooting_sound,1,0);
other.object_bullet_2.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
instance_create(x + ldx, y + ldy, gun_flash);
instance_create(x, y, casings);
other.object_bullet_2.speed = bullet_speed;
alarm[2] = alarm_timer;;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.potato_gun_bullet_timer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) and (weapon_picked_up == true) {  
    
    with(weapon_equipped) {    

        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
    
    //////////////////////////////////////////////////////////////////
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
    //////////////////////////////////////////////////////////////////
    
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm

if (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) and (weapon_picked_up = true) {
    
    with(weapon_equipped) {
    
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
    
    //////////////////////////////////////////////////////////////////
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        } 
        
    //////////////////////////////////////////////////////////////////
    
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
        
            sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
            x = obj_Rat_Back_Arm.x;
            y = obj_Rat_Back_Arm.y;
        }
        
        if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
        
            sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
            x = obj_Rat_Front_Arm.x;
            y = obj_Rat_Front_Arm.y;
        } 
    }
}
/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) and (weapon_picked_up == true) and (equipped == true) {    

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm

if (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) and (weapon_picked_up == true) {
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    } 
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gun_type == 1) {
//Potato Handgun, Beretta
    if (gun_collision == true) {
    
        if (mouse_check_button_pressed(mb_left) and (other.potato_gun_bullet_timer == true)) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
                
            other.object_bullet = instance_create(x, y, bullet);
            audio_play_sound(shooting_sound, 1, 0);
            other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            instance_create(x + ldx, y + ldy, gun_flash);
            other.object_bullet.speed = bullet_speed;
            other.potato_gun_bullet_timer = false;
            alarm[0] = cool_down;
        }
    }
}

//AR15
if (gun_type == 2) {

    if (gun_collision == true) {
    
        if mouse_check_button_pressed(mb_left) and (other.potato_gun_bullet_timer == true) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
            
            other.object_bullet = instance_create(x, y, bullet);
            audio_play_sound(shooting_sound, 1, 0);
            other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            instance_create(x + ldx, y + ldy, gun_flash);
            instance_create(x, y, casings);
            other.object_bullet.speed = bullet_speed;
            alarm[1] = alarm_timer;
            alarm[2] = alarm_timer;
        }
    }
}

if (gun_type == 3) {

}

//Laser rifle
if (gun_type == 4) {

    if (gun_collision == true) {
    
        if mouse_check_button(mb_left) and (other.potato_gun_bullet_timer == true) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
        
            other.sprite_index = gun_charging_animation;
            //audio_play_sound(charging_sound, 1, 0);
            other.image_speed = charging_speed;

            if (mouse_check_button_released(mb_left)) and (other.image_index = index_size) {
                
                other.object_bullet = instance_create(x, y, bullet);
                audio_play_sound(shooting_sound, 1, 0);
                other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
                other.object_bullet.speed = bullet_speed;
                //scr_find_distance_to_object(x, y, point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y), object, point_distance(obj_Parent_Gun.x, obj_Parent_Gun.y, mouse_x, mouse_y));
                other.potato_gun_bullet_timer = false;
                alarm[0] = cool_down;
            }
            
            if ((mouse_check_button_released(mb_left)) and (other.image_index &lt; index_size)) {
                
                other.potato_gun_bullet_timer = false;
            }
        } 
    }
}

if (weapon_picked_up == true) {

    //Angle of head when looking up right
    
    if (global.direction_player &gt;= 0) and (global.direction_player &lt;= 30) {
    
        image_angle = global.direction_player;
    }
    
    if (global.direction_player &gt;= 31) and (global.direction_player &lt;= 89) {
        
        image_angle = 31;
    }
    
    //Angle of head when looking up left
    
    if (global.direction_player &gt;= 90) and (global.direction_player &lt;= 130) {
    
        image_angle = 131 - correction;
    }
    
    if (global.direction_player &gt;= 131) and (global.direction_player &lt;= 179) {
    
        image_angle = global.direction_player - correction;
    }
    
    //Angle of head when looking down left
    
    if (global.direction_player &gt;= 180) and (global.direction_player &lt;= 220) {
    
        image_angle = global.direction_player + correction_2;
    }
    
    if (global.direction_player &gt;= 221) and (global.direction_player &lt;= 269) {
    
        image_angle = 221 + correction_2;
    }
    
    //Angle of head when looking down right
    
    if (global.direction_player &gt;= 270) and (global.direction_player &lt;= 310) {
    
        image_angle = 310;
    }
    
    if (global.direction_player &gt;= 311) and (global.direction_player &lt;= 359) {
    
        image_angle = global.direction_player;
    }
}

////////////////////////////////////////////////////////////////////Weilding guns////////////////////////////////////////////////////////////////////
/*
weapon_to_pick_up = instance_place(x, y, obj_Rat_Body);

if ((equip_text_box == true) and (equipped == false) and (sprite_index = sprite_index_Gun_In_Use_Pick_Up) and (keyboard_check_pressed(ord('E')))) {
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Left)) and (obj_Rat_Body.gun_collision == false) and (weapon_to_pick_up != noone)) {
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Front_Arm.x;
        weapon_equipped.y = obj_Rat_Front_Arm.y;
        
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        weapon_picked_up = true;
        obj_Rat_Body.gun_collision = true;
        equipped = true;
        global.weapon_attach_left_arm = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Right)) and (obj_Rat_Body.gun_collision == false) and (weapon_to_pick_up != noone)) {
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Back_Arm.x;
        weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        weapon_picked_up = true;
        obj_Rat_Body.gun_collision = true;
        equipped = true;
        global.weapon_attach_right_arm = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Left)) and (obj_Rat_Body.gun_collision == false) and (weapon_to_pick_up != noone)) {
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Front_Arm.x;
        weapon_equipped.y = obj_Rat_Front_Arm.y;
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        weapon_picked_up = true;
        obj_Rat_Body.gun_collision = true;
        equipped = true;
        global.weapon_attach_left_arm = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Right)) and (obj_Rat_Body.gun_collision == false) and (weapon_to_pick_up != noone)) {
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Back_Arm.x;
        weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        weapon_picked_up = true;
        obj_Rat_Body.gun_collision = true;
        equipped = true;
        global.weapon_attach_right_arm = true;
    }
}


////////////////////////////////////////////////////////////////////Weilding guns////////////////////////////////////////////////////////////////////
if ((equip_text_box == true) and (equipped == true) and (sprite_index = sprite_index_Gun_In_Use_Pick_Up) and (keyboard_check_pressed(ord('E')))) {
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Left)) and (weapon_to_pick_up != noone)) {
        
        weapon_dropped = weapon_equipped;
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Front_Arm.x;
        weapon_equipped.y = obj_Rat_Front_Arm.y;
        
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        global.weapon_attach_left_arm = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Right)) and (weapon_to_pick_up != noone)) {
        
        weapon_dropped = weapon_equipped;
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Back_Arm.x;
        weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        global.weapon_attach_right_arm = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Left)) and (weapon_to_pick_up != noone)) {
        
        weapon_dropped = weapon_equipped;
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Front_Arm.x;
        weapon_equipped.y = obj_Rat_Front_Arm.y;
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        global.weapon_attach_left_arm = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Right)) and (weapon_to_pick_up != noone)) {//(obj_Rat_Body.gun_collision == false)) {
        
        weapon_dropped = weapon_equipped;
        
        weapon_equipped = obj_Gun_In_Use;
        
        weapon_equipped.x = obj_Rat_Back_Arm.x;
        weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        global.weapon_attach_right_arm = true;
    }
    
    weapon_picked_up = true;
    //obj_Rat_Body.gun_collision = true;
    equipped = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,8</point>
    <point>7,7</point>
  </PhysicsShapePoints>
</object>
