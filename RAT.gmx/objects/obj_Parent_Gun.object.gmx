<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Gun_In_Use = noone;

sprite_index_Right_Gun_In_Use_Equipped = noone;

sprite_index_Left_Gun_In_Use_Equipped = noone;

sprite_index_Left_Gun_In_Use_Pick_Up = noone;

sprite_index_Right_Gun_In_Use_Pick_Up = noone;

potato_gun_bullet_timer = true;

correction = noone;

correction_2 = noone;

ammo = noone;

ammo_reserve = noone;

ammo_capacity = noone;

ammo_reserve = noone;

gun_type = noone;

bullet = noone;

bullet_speed = noone;

casings = noone;

alarm_timer = noone;

cool_down = noone;

shooting_sound = noone;

ldx = noone;

ldy = noone;

gun_charging_animation_left = noone;

gun_charging_animation_right = noone;

charging_speed = noone;

charging_sound = noone;

index_size = noone;

screen_jiggle = noone;

//1 equals single fire (handgun, beretta, sniper)
//2 equals burst fire (AR15)
//3 equals pump action (Shotgun)
//4 laser weapon (laster)
//5 automatc (shotgun)

text = noone;
popup_width = noone;
popup_padding = noone;
draw_below = noone;
font = noone;
font_color = noone; 
bak_color = noone;

//////////////////////////////////////////////////////

gun_collision = false;

weapon_picked_up = false;

equipped = false;

equip_text_box = false;

reloaded_ammo = noone;

aud = noone;

floating_number = 0;

flip_float = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (flip_float == false) {

    floating_number += 1;
}

if (flip_float == true) {

    floating_number -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_jiggle = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.object_bullet_3 = instance_create(x, y, bullet);
audio_play_sound(shooting_sound, 1, 0);
other.object_bullet_3.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
other.object_bullet_3.speed = bullet_speed;
instance_create(x + ldx, y + ldy, gun_flash);
instance_create(x, y, casings);
other.potato_gun_bullet_timer = false;
alarm[0] = cool_down;
ammo -= 1;

if (screen_jiggle == true) {

    global.screen_shake = 2;
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.object_bullet_2 = instance_create(x, y, bullet);
audio_play_sound(shooting_sound,1,0);
other.object_bullet_2.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
instance_create(x + ldx, y + ldy, gun_flash);
instance_create(x, y, casings);
other.object_bullet_2.speed = bullet_speed;
alarm[2] = alarm_timer;
ammo -= 1;

if (screen_jiggle == true) {

    global.screen_shake = 2;
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>potato_gun_bullet_timer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) and (weapon_picked_up == true) {     

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm

if (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) and (weapon_picked_up = true) {
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    } 
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    } 
}
/*
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) and (weapon_picked_up == true) and (equipped == true) {    

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm

if (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) and (weapon_picked_up == true) {
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    } 
    
//////////////////////////////////////////////////////////////////

    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        x = obj_Rat_Back_Arm.x;
        y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        x = obj_Rat_Front_Arm.x;
        y = obj_Rat_Front_Arm.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if  ((global.direction_player &gt;= 0) and (global.direction_player &lt;= 89)) and (obj_Rat_Head.walk_up_right == false) and (obj_Rat_Head.collision_with_enemy == false) {

    if (global.weapon_attach_left_arm == true) and (gun_collision == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 2;
    }
    
    if (gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
}

if ((global.direction_player &gt;= 90) and (global.direction_player &lt;= 179)) and (obj_Rat_Head.walk_up_left == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    if (gun_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
    
    if (gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        //obj_Rat_Body.depth = 2;
        obj_Rat_Body.depth = 0;
    }
}

if ((global.direction_player &gt;= 180) and (global.direction_player &lt;= 269)) and (obj_Rat_Head.walk_down_left == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    if (gun_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
    
    if (gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 1;
    }
}

if ((global.direction_player &gt;= 270) and (global.direction_player &lt;= 359)) and (obj_Rat_Head.walk_down_right == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    if (gun_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 1;
    }
    
    if (gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 0;
    }
}

if ((sprite_index == sprite_index_Left_Gun_In_Use_Pick_Up) or (sprite_index == sprite_index_Right_Gun_In_Use_Pick_Up)) {

    if (flip_float == false) {
    
        y = y + floating_number;
        alarm[4] = 1;
        
        if (floating_number == 3) {

            flip_float = true;
        }
    }
    
    if (flip_float == true) {
        
        y = y - floating_number;
        alarm[4] = 1;
        
        if (floating_number == 0) {

            flip_float = false;
        }
    }
}

if (gun_type == 1) {
//Potato Handgun, Beretta
    if (gun_collision == true) and (ammo &gt;= 1) {
    
        if (mouse_check_button_pressed(mb_left) and (potato_gun_bullet_timer == true)) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
                
            object_bullet = instance_create(x, y, bullet);
            audio_play_sound(shooting_sound, 1, 0);
            object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            instance_create(x + ldx, y + ldy, gun_flash);
            object_bullet.speed = bullet_speed;
            potato_gun_bullet_timer = false;
            alarm[0] = cool_down;
            ammo -= 1;
            
            if (screen_jiggle == true) {
            
                global.screen_shake = 4;
                instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
            }
        }
    }
}

//AR15
if (gun_type == 2) {

    if (gun_collision == true) and (ammo &gt;= 1) {
    
        if mouse_check_button_pressed(mb_left) and (other.potato_gun_bullet_timer == true) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
            
            other.object_bullet = instance_create(x, y, bullet);
            audio_play_sound(shooting_sound, 1, 0);
            other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            instance_create(x + ldx, y + ldy, gun_flash);
            instance_create(x, y, casings);
            other.object_bullet.speed = bullet_speed;
            alarm[1] = alarm_timer;
            alarm[2] = alarm_timer;
            ammo -= 1;
            
            if (screen_jiggle == true) {
            
                global.screen_shake = 2;
                instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
            }
        }
    }
}

//Shotgun
if (gun_type == 3) and (ammo &gt;= 1) {

}

//Laser rifle
if (gun_type == 4) and (ammo &gt;= 1) {

    if (gun_collision == true) {
    
        if mouse_check_button(mb_left) and (other.potato_gun_bullet_timer == true) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
        
            other.sprite_index = gun_charging_animation;
            //audio_play_sound(charging_sound, 1, 0);
            other.image_speed = charging_speed;

            if (mouse_check_button_released(mb_left)) and (other.image_index = index_size) {
                
                other.object_bullet = instance_create(x, y, bullet);
                audio_play_sound(shooting_sound, 1, 0);
                other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
                other.object_bullet.speed = bullet_speed;
                //scr_find_distance_to_object(x, y, point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y), object, point_distance(obj_Parent_Gun.x, obj_Parent_Gun.y, mouse_x, mouse_y));
                other.potato_gun_bullet_timer = false;
                alarm[0] = cool_down;
                ammo -= 1;
            }
            
            if ((mouse_check_button_released(mb_left)) and (other.image_index &lt; index_size)) {
                
                other.potato_gun_bullet_timer = false;
            }
        } 
    }
}

//P90
if (gun_type = 5) and (ammo &gt;= 1) {

    if (gun_collision == true) {
    
        if (mouse_check_button(mb_left) and (potato_gun_bullet_timer == true)) and ((global.weapon_attach_right_arm == true) or 
        (global.weapon_attach_left_arm == true)) {
                
            object_bullet = instance_create(x, y, bullet);
            audio_play_sound(shooting_sound, 1, 0);
            object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
            instance_create(x + ldx, y + ldy, gun_flash);
            object_bullet.speed = bullet_speed;
            ammo -= 1;
            
            if (mouse_check_button_released(mb_left)) {
            
                potato_gun_bullet_timer = false;
                alarm[0] = 1;
            }
            
            if (screen_jiggle == true) {
            
                global.screen_shake = 2;
                instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
                alarm[3] = 2;
                screen_jiggle = false;
            }
        }
    }
}

if (ammo &gt;= 1) {
    
    aud = false;
}

if (ammo == 0) {
    
    aud = true;
}

if (ammo &lt;= 0) and (mouse_check_button_pressed(mb_left) and (aud == true)) {
    
    audio_play_sound(snd_No_Ammo, 1, 0);
}

if (keyboard_check_pressed(ord('R'))) and (ammo &lt; ammo_capacity) and (ammo_reserve &gt;= 1) {
    
    audio_play_sound(snd_Pickup, 1, 0);

    if (ammo_reserve &gt; ammo) {
        
        reloaded_ammo = ammo_capacity - ammo;
        ammo_reserve = ammo_reserve - reloaded_ammo;
    }
    
    if (ammo_reserve &lt; ammo_capacity) and (ammo_reserve &lt; ammo) {
    
        reloaded_ammo = ammo_reserve;
        ammo_reserve = 0;
    }
    
    ammo = reloaded_ammo + ammo;
}


if (weapon_picked_up == true) {

    //Angle of head when looking up right
    
    if (global.direction_player &gt;= 0) and (global.direction_player &lt;= 30) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player;
    }
    
    if (global.direction_player &gt;= 31) and (global.direction_player &lt;= 89) {
        
        obj_Rat_Body.weapon_equipped.image_angle = 31;
    }
    
    //Angle of head when looking up left
    
    if (global.direction_player &gt;= 90) and (global.direction_player &lt;= 130) {
    
        obj_Rat_Body.weapon_equipped.image_angle = 131 - correction;
    }
    
    if (global.direction_player &gt;= 131) and (global.direction_player &lt;= 179) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player - correction;
    }
    
    //Angle of head when looking down left
    
    if (global.direction_player &gt;= 180) and (global.direction_player &lt;= 220) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player + correction_2;
    }
    
    if (global.direction_player &gt;= 221) and (global.direction_player &lt;= 269) {
    
        obj_Rat_Body.weapon_equipped.image_angle = 221 + correction_2;
    }
    
    //Angle of head when looking down right
    
    if (global.direction_player &gt;= 270) and (global.direction_player &lt;= 310) {
    
        obj_Rat_Body.weapon_equipped.image_angle = 310;
    }
    
    if (global.direction_player &gt;= 311) and (global.direction_player &lt;= 359) {
    
        obj_Rat_Body.weapon_equipped.image_angle = global.direction_player;
    }
}

////////////////////////////////////////////////////////////////////Weilding guns////////////////////////////////////////////////////////////////////

if ((equip_text_box == true) and ((sprite_index = sprite_index_Left_Gun_In_Use_Pick_Up) or (sprite_index = sprite_index_Right_Gun_In_Use_Pick_Up)) 
and ((global.weapon_attach_right_arm = false) and (global.weapon_attach_left_arm = false)) and (keyboard_check_pressed(ord('E')))) {
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Right))) {       

        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Right))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
    
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    floating = false;
}

////////////////////////////////////////////////////////////////////Weilding guns////////////////////////////////////////////////////////////////////
if ((equip_text_box == true) and ((sprite_index = sprite_index_Left_Gun_In_Use_Pick_Up) or (sprite_index = sprite_index_Right_Gun_In_Use_Pick_Up)) 
and ((global.weapon_attach_right_arm = true) or (global.weapon_attach_left_arm = true)) and (keyboard_check_pressed(ord('E')))) {
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Left_Gun_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.gun_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Gun_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Gun_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = false;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Down_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Right))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Right_Gun_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.gun_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Gun_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Gun_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        global.weapon_attach_left_arm = false;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Left) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Left) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Left))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Left_Gun_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.gun_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Gun_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Gun_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Front_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Front_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Left_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = false;
        global.weapon_attach_left_arm = true;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    if (//Walking Animation
        ((obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Right) or (obj_Rat_Body.sprite_index = spr_Body_Standard_Stun_Up_Right) or 
        (obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Up_Right))) {
        
        equip_text_box = false;
        
        obj_Rat_Body.weapon_dropped = obj_Rat_Body.weapon_equipped;
        obj_Rat_Body.weapon_dropped.sprite_index = obj_Rat_Body.weapon_dropped.sprite_index_Right_Gun_In_Use_Pick_Up;
        obj_Rat_Body.weapon_dropped.weapon_picked_up = false;
        obj_Rat_Body.weapon_dropped.gun_collision = false;
        obj_Rat_Body.weapon_dropped.equipped = false;
        obj_Rat_Body.weapon_dropped.x = obj_Gun_In_Use.x;
        obj_Rat_Body.weapon_dropped.y = obj_Gun_In_Use.y;
        obj_Rat_Body.weapon_dropped.persistent = false;
        
        obj_Rat_Body.weapon_equipped = obj_Gun_In_Use;
        obj_Rat_Body.weapon_equipped.x = obj_Rat_Back_Arm.x;
        obj_Rat_Body.weapon_equipped.y = obj_Rat_Back_Arm.y;
        obj_Rat_Body.weapon_equipped.sprite_index = sprite_index_Right_Gun_In_Use_Equipped;
        obj_Rat_Body.weapon_equipped.weapon_picked_up = true;
        obj_Rat_Body.weapon_equipped.gun_collision = true;
        obj_Rat_Body.weapon_equipped.equipped = true;
        global.weapon_attach_right_arm = true;
        global.weapon_attach_left_arm = false;
        obj_Rat_Body.weapon_equipped.persistent = true;
    }
    
    floating = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Event for obj_Parent_Gun

draw_self();

if (!place_meeting(x, y, obj_Rat_Body)) { //and (weapon_picked_up == false) and (equipped = false)) {

    equip_text_box = false; 
}

if (place_meeting(x, y, obj_Rat_Body) and (obj_Gun_In_Use.weapon_picked_up == false) and (obj_Gun_In_Use.equipped = false)) {

    draw_set_font(font);
    draw_set_color(font_color);    
    
    scr_draw_messagebox(text, popup_width, popup_padding, self, bak_color, draw_below);
    equip_text_box = true;
}


if ((global.weapon_attach_left_arm == true) or (global.weapon_attach_right_arm = true)) {

    draw_text_colour((view_xview[0] + 100),(view_yview[0] + 10), string(obj_Rat_Body.weapon_equipped.ammo), c_lime, c_lime, c_lime, c_lime, 1);
    
    draw_set_font(Game_Font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_colour((view_xview[0] + 150),(view_yview[0] + 10), string(obj_Rat_Body.weapon_equipped.ammo_reserve), c_lime, c_lime, c_lime, c_lime, 1);
}

if ((sprite_index == sprite_index_Left_Gun_In_Use_Pick_Up) or (sprite_index == sprite_index_Right_Gun_In_Use_Pick_Up)) {

    depth = y * -1;
    draw_sprite_ext(sprite_index, image_index, x, y + sprite_height, image_xscale, image_yscale, image_angle, c_black, 0.25);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,8</point>
    <point>7,7</point>
  </PhysicsShapePoints>
</object>
