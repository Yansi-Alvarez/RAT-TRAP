<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index_Right_Gun_In_Use = noone;

sprite_index_Left_Gun_In_Use = noone;

potato_gun_bullet_timer = true;

correction = noone;

correction = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.potato_gun_bullet_timer = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (obj_Rat_Body.weapon_attach_left_arm == true) and (obj_Rat_Body.weapon_picked_up == true) and (obj_Rat_Body.weapon_attach_right_arm == false) and (obj_Rat_Body.gun_collision == true) {
        
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }
}
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm

if (obj_Rat_Body.weapon_attach_right_arm == true) and (obj_Rat_Body.weapon_picked_up == true) and (obj_Rat_Body.weapon_attach_left_arm == false) and (obj_Rat_Body.gun_collision == true) {
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Down_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Left) {
        other.sprite_index = sprite_index_Left_Gun_In_Use;
        other.x = obj_Rat_Back_Arm.x;
        other.y = obj_Rat_Back_Arm.y;
    }
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Walking_Up_Right) {
        other.sprite_index = sprite_index_Right_Gun_In_Use;
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (obj_Rat_Body.gun_collision == true) {
    if mouse_check_button_pressed(mb_left) and (other.potato_gun_bullet_timer == true) and ((obj_Rat_Body.weapon_attach_right_arm == true) or (obj_Rat_Body.weapon_attach_left_arm == true)) {
            
        other.object_bullet = instance_create(x,y,obj_Potato_Bullet);
        other.object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
        other.object_bullet.speed = 10;
        other.potato_gun_bullet_timer = false;
        alarm[0] = 5;
    }
}

correction = 160;
correction_2 = 200;

if (obj_Rat_Body.weapon_picked_up == true) {

    //Angle of head when looking up right
    
    if (global.direction_player &gt;= 0) and (global.direction_player &lt;= 30) {
    
        image_angle = global.direction_player;
    }
    
    if (global.direction_player &gt;= 31) and (global.direction_player &lt;= 89) {
        
        image_angle = 31;
    }
    
    //Angle of head when looking up left
    
    if (global.direction_player &gt;= 90) and (global.direction_player &lt;= 130) {
    
        image_angle = 131 - correction;
    }
    
    if (global.direction_player &gt;= 131) and (global.direction_player &lt;= 179) {
    
        image_angle = global.direction_player - correction;
    }
    
    //Angle of head when looking down left
    
    if (global.direction_player &gt;= 180) and (global.direction_player &lt;= 220) {
    
        image_angle = global.direction_player + correction_2;
    }
    
    if (global.direction_player &gt;= 221) and (global.direction_player &lt;= 269) {
    
        image_angle = 221 + correction_2;
    }
    
    //Angle of head when looking down right
    
    if (global.direction_player &gt;= 270) and (global.direction_player &lt;= 310) {
    
        image_angle = 310;
    }
    
    if (global.direction_player &gt;= 311) and (global.direction_player &lt;= 359) {
    
        image_angle = global.direction_player;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,8</point>
    <point>7,7</point>
  </PhysicsShapePoints>
</object>
