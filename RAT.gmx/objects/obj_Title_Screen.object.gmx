<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Values/Strings for the title screen variables

version_number = "1.0";

code_number = "3";

title_screen_string = "Ratatosk Facilities Property [Version " + version_number + "]";

copyright_string = "Copyright (c) 2015 Ratatosk Labs. All rights reserved.";

tester_string = "C:\Users\Tester&gt;";

description = "Debug the level and keep working!";

xscale_text = 1

yscale_text = 1

separation = 5;

text_length_max = 1000;

text_color = c_lime;

draw_text_x = (room_width - (room_width - 5));

draw_text_y1 = (room_height - (room_height - 5));

draw_text_y2 = (room_height - (room_height - 35));

draw_text_y3 = (room_height - (room_height - 65));

alpha_value = 1;

text_corrector = (room_width/64);

MyHour = noone;;

MyMinute = noone;

MyDay = noone;

MyMonth = noone;

MyYear = noone;

clock_string = noone;

//Booleans for room states

terminal_room = false;

cage_room = false;

start_room = false;

exit_room = false;

lab_room = false;

commence = true;

//Cursor Code
instance_create(room_width/2, room_height/2, obj_Cursor)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MyHour = string(date_get_hour(date_current_datetime()));
MyMinute = string(date_get_minute(date_current_datetime()));
MyDay = string(date_get_day(date_current_datetime()));
MyMonth = string(date_get_month(date_current_datetime()));
MyYear = string(date_get_year(date_current_datetime()));

clock_string = MyHour + ' : ' + MyMinute;

date_string = MyMonth + ' / ' + MyDay + ' / ' + MyYear;

obj_Cursor.x = mouse_x;
obj_Cursor.y = mouse_y;

//inst_start inst_terminal inst_cage inst_lab inst_exit

inst_terminal = collision_rectangle((room_width - (room_width/6)), draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 2), (room_width - (room_width/32)), (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 2), obj_Cursor, false, true);

inst_cage = collision_rectangle((room_width - (room_width/6)), draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 3), (room_width - (room_width/32)), (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 3), obj_Cursor, false, true);

inst_lab = collision_rectangle((room_width - (room_width/6)), draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 4), (room_width - (room_width/32)), (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 4), obj_Cursor, false, true);

inst_start = collision_rectangle((room_width - (room_width/6)), draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 6), (room_width - (room_width/32)), (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 6), obj_Cursor, false, true);

if (start_room == true) and (exit_room == false) and (terminal_room == false) and (cage_room == false) {

    room_goto(1);
}

inst_exit = collision_rectangle((room_width - (room_width/6)), draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 7), (room_width - (room_width/32)), (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * 7), obj_Cursor, false, true);

if (exit_room == true) and (terminal_room == false) and (cage_room == false) and (start_room == false) {

    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_background_stretched(bkgd_Black, 0, 0, room_width, room_height);

//draw_rectangle_colour(3, 50, 853, 614, c_lime, c_lime, c_lime, c_lime, true);

draw_set_font(fnt_Text_Font);

if (commence == true) or (cage_room == true) or (terminal_room == true) {

    draw_text_ext_transformed_colour(draw_text_x, draw_text_y1, title_screen_string, separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
    
    draw_text_ext_transformed_colour(draw_text_x, draw_text_y2, copyright_string, separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
    
    draw_text_ext_transformed_colour(draw_text_x, draw_text_y3, tester_string, separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
}

if (cage_room == false) and (lab_room == false) {

    draw_sprite(spr_Controls, 0, 525, 450);
    draw_text_ext_transformed_colour(300, 275, "Movement", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
    draw_text_ext_transformed_colour(450, 350, "Left Click to Fire", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
    draw_text_ext_transformed_colour(500, 575, "Equip Weapon", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
    draw_text_ext_transformed_colour(400, 800, description, separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
}

/*
draw_text_ext_transformed_colour(3, 635, "Manual code entry prompt.", 3, 500, 1, 1, 0, c_lime, c_lime, c_lime, c_lime, 1);

draw_text_ext_transformed_colour(3, 656, "Enter a " + code_number + " letter code for generation. No digits or symbols.", 3, 500, 1, 1, 0, c_lime, c_lime, c_lime, c_lime, 1);

draw_rectangle_colour(3, 688, 850, 752, c_lime, c_lime, c_lime, c_lime, true);

draw_text_ext_transformed_colour(9, 704, "&gt;", 3, 500, 1, 1, 0, c_lime, c_lime, c_lime, c_lime, 1);
*/

//interactive button menu starts here
//outline

for (i = 1; i &lt; 9; i += 1) {

    draw_rectangle_colour((room_width - (room_width/6)), draw_text_y2, (room_width - (room_width/32)), round(((room_width/12) * i)) + draw_text_y2, text_color, text_color, text_color, text_color, true);
   
    //Time Box
    if (i == 1) {
        
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 10), (((round(((room_width/12)) + draw_text_y2))/2) * i) - text_corrector, "Time", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        draw_text_ext_transformed_colour((((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 15)), (((round(((room_width/12)) + draw_text_y2))/2) * i) + text_corrector, clock_string, separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
    }
    
    //Date Box
    if (i == 2) {
        
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 10), (((round(((room_width/12)) + draw_text_y2))/2) * i) + text_corrector, "Date", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        draw_text_ext_transformed_colour(((((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector * 2)) - 30), (((round(((room_width/12)) + draw_text_y2))/2) * i) + (text_corrector * 3), date_string, separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
    }
    
    //Terminal Box
    if (i == 3) {
    
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 30), (((round(((room_width/12)) + draw_text_y2))/2) * i) + (text_corrector * 4), "Terminal", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        
        //Terminal Box Interaction
        if (inst_terminal != noone) and (inst_start == noone) and (inst_cage == noone) and (inst_lab == noone) and (inst_exit == noone) {
            
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i- 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_white, c_white, c_white, c_white, false);
            
            if (mouse_check_button(mb_left)) {
        
                draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
                terminal_room = true;
                cage_room = false;
                lab_room = false;
            
            }
        }
    }
    
    //Cage Box
    if (i == 4) {
    
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 10), (((round(((room_width/12)) + draw_text_y2))/2) * i) + (text_corrector * 5.5), "Cage", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        
        //Cage Box Interaction
        if (inst_cage != noone) and (inst_start == noone) and (inst_terminal == noone) and (inst_lab == noone) and (inst_exit = noone) {
            
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i- 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_white, c_white, c_white, c_white, false);
            
            if (mouse_check_button(mb_left)) {
        
                draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
                cage_room = true;
                terminal_room = false;
                lab_room = false;
            }
        }
    }
    
    //Lab Box
    if (i == 5) {
    
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 5), (((round(((room_width/12)) + draw_text_y2))/2) * i) + (text_corrector * 7.5), "Lab", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        
        //Cage Box Interaction
        if (inst_lab != noone) and (inst_start == noone) and (inst_cage == noone) and (inst_terminal == noone) and (inst_exit == noone) {
            
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i- 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_white, c_white, c_white, c_white, false);
            
            if (mouse_check_button(mb_left)) {
        
                draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
                lab_room = true;
                cage_room = false;
                terminal_room = false;
                commence = false;
            }
        }
    }
/*
    //Research Box
    if (i == 6) {
    
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 10), (((round(((room_width/12)) + draw_text_y2))/2) * i) + (text_corrector * 5.5), "Cage", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        
        //Cage Box Interaction
        if (inst_cage != noone) {//and (inst_start == noone) and (inst_exit == noone) and (inst_terminal == noone) {
            
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i- 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_white, c_white, c_white, c_white, false);
            
            if (mouse_check_button(mb_left)) {
        
                draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
                cage_room = true;
                terminal_room = false;
            }
        }
    }
*/
    //Start Box
    if (i == 7) {
    
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 10), (((round(((room_width/12)) + draw_text_y2))/2) * (i + 3)), "Start", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        
        //Start Box Interaction
        if (inst_start != noone) and (inst_terminal == noone) and (inst_cage == noone) and (inst_lab == noone) and (inst_exit == noone) {
            
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i- 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_white, c_white, c_white, c_white, false);
        }
        
        if (inst_start != noone) and (mouse_check_button(mb_left)) {
        
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
            start_room = true;
            lab_room = false;
            cage_room = false;
            terminal_room = false;
            commence = false;
        }
    }
    
    //End Box
    if (i == 8) {
    
        draw_text_ext_transformed_colour(((round(room_width - (room_width/32)) + round(room_width - (room_width/6)))/2) - (text_corrector + 10), (((round(((room_width/12)) + draw_text_y2))/2) * (i + 3)) + (text_corrector + 20), "Exit", separation, text_length_max, xscale_text, yscale_text, 0, text_color, text_color, text_color, text_color, alpha_value);
        
        //End Box Interaction
        if (inst_exit != noone) and (inst_start == noone) and (inst_cage == noone) and (inst_lab == noone) and (inst_terminal == noone) {
            
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_white, c_white, c_white, c_white, false);
        }
        
        if (inst_exit != noone) and (mouse_check_button(mb_left)) {
        
            draw_rectangle_colour((room_width - (room_width/6)) - 1, draw_text_y2 + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), (room_width - (room_width/32)) - 1, (round(room_width/12) + draw_text_y2) + (((round(room_width/12) + draw_text_y2) - (draw_text_y2)) * (i - 1)), c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
            exit_room = true;
            lab_room = false;
            cage_room = false;
            terminal_room = false;
            commence = false;
        }
    
    }
}

if (cage_room == true) and (terminal_room == false) and (lab_room == false) {

    draw_background(bkgd_Cage, 20, 100);
}

if (lab_room == true) and (terminal_room == false) and (cage_room == false) {

    draw_background(bkgd_Upgrade, 250, 40);
}

/*
//Terminal Box

if (inst_home != noone) and (inst_start == noone) and (inst_exit == noone) {
    
    draw_rectangle_colour(901, 176, 1008, 264, c_white, c_white, c_white, c_white, false);
}

if (inst_home != noone) and (mouse_check_button(mb_left)) {

    draw_rectangle_colour(901, 176, 1008, 264, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false);
    start_room = true;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>15,19</point>
    <point>19,19</point>
  </PhysicsShapePoints>
</object>
