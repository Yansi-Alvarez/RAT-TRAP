<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Body_Standard_Idle_Down_Left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weapon_attach_right_arm = false;

weapon_attach_left_arm = false;

weapon_picked_up = false;

global.weapon_picked_up_again = false;

gun_collision = false;

//global.gun_2_collision = false;

global.one_handed_melee_collision = false;

//global.one_handed_melee_2_collision = false;

image_speed = 0.3;

sprite_index = spr_Body_Standard_Idle_Down_Left;

hspeed = 0;

vspeed = 0;

alarm_zero = 0;

knock_back_speed = 0;

walk_up_left = false;
walk_up_right = false;
walk_down_left = false;
walk_down_right = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>knock_back_speed = 0;

obj_Rat_Head.hspeed = 0;
obj_Rat_Front_Arm.hspeed = 0;
obj_Rat_Back_Arm.hspeed = 0;
hspeed = 0;
obj_Rat_Legs.hspeed = 0;
obj_Rat_Tail.hspeed = 0;

obj_Rat_Head.vspeed = 0;
obj_Rat_Front_Arm.vspeed = 0;
obj_Rat_Back_Arm.vspeed = 0;
vspeed = 0;
obj_Rat_Legs.vspeed = 0;
obj_Rat_Tail.vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_Parent_Enemy.enemy_speed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((global.direction_player &gt;= 0) and (global.direction_player &lt;= 89)) and (walk_up_right == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    sprite_index = spr_Body_Standard_Idle_Up_Right;
    depth = 1;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        sprite_index = spr_Body_Standard_Walking_Up_Right;
        walk_up_right = true;
    }
}

if ((global.direction_player &gt;= 90) and (global.direction_player &lt;= 179)) and (walk_up_left == false) and (obj_Rat_Head.collision_with_enemy == false) {

    sprite_index = spr_Body_Standard_Idle_Up_Left;
    depth = 1;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Up_Left;
        walk_up_left = true;
    }
}

if ((global.direction_player &gt;= 180) and (global.direction_player &lt;= 269)) and (walk_down_left == false) and (obj_Rat_Head.collision_with_enemy == false) {

    obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Left;
    obj_Rat_Body.depth = 1;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Left;
        walk_down_left = true;
    }
}

if ((global.direction_player &gt;= 270) and (global.direction_player &lt;= 359)) and (walk_down_right == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    obj_Rat_Body.sprite_index = spr_Body_Standard_Idle_Down_Right;
    obj_Rat_Body.depth = 1;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
    
        obj_Rat_Body.sprite_index = spr_Body_Standard_Walking_Down_Right;
        walk_down_right = true;
    }
}

if keyboard_check(ord('D')) {

    image_speed = 0.3;
    hspeed = 5; 
}

if keyboard_check(ord('A')) {

    image_speed = 0.3;
    hspeed = -5;
}

if keyboard_check(ord('W')) {

    image_speed = 0.3;
    vspeed = -5; 
}

if keyboard_check(ord('S')) {

    image_speed = 0.3;
    vspeed = 5;
}

if keyboard_check_released(ord('D')) {

    image_speed = 0.3;
    hspeed = 0; 
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('A')) {

    image_speed = 0.3;
    hspeed = 0;  
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('W')) {

    image_speed = 0.3;
    vspeed = 0; 
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('S')) {

    image_speed = 0.3;
    vspeed = 0;  
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Parent_One_Handed_Melee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.one_handed_melee_collision = true;

////////////////////////////////////////////////////////////////////Weilding guns////////////////////////////////////////////////////////////////////
//if (global.one_handed_melee_collision == true) and (global.one_handed_melee_2_collision == false) {

    //if (global.weapon_attach_left_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            (sprite_index = spr_Body_Standard_Walking_Down_Left) and (global.one_handed_melee_collision == false) and
            ((global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use) or
            (global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use))) {
            
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
            
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.weapon_attach_left_arm = true;
            global.weapon_picked_up = true;
            //global.one_handed_melee_pick_up = true;
            global.one_handed_melee_collision = true;
        }
    //}
    
    //if (global.weapon_attach_right_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            (sprite_index = spr_Body_Standard_Walking_Down_Right) and (global.one_handed_melee_collision == false) and
            ((global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use) or
            (global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use))) {
        
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.weapon_attach_right_arm = true;
            global.weapon_picked_up = true;
            //global.one_handed_melee_pick_up = true;
            global.one_handed_melee_collision = true;
        }
    //}
    
    //if (global.weapon_attach_left_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            ((sprite_index = spr_Body_Standard_Walking_Up_Left)) and (global.one_handed_melee_collision == false) and
            ((global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use) or
            (global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use))) {
        
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.weapon_attach_left_arm = true;
            global.weapon_picked_up = true;
            //global.one_handed_melee_pick_up = true;
            global.one_handed_melee_collision = true;
        }
    //}
    
    //if (global.weapon_attach_right_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            ((sprite_index = spr_Body_Standard_Walking_Up_Right)) and (global.one_handed_melee_collision == false) and
            ((global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use) or
            (global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use))) {
        
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.weapon_attach_right_arm = true;
            global.weapon_picked_up = true;
            //global.one_handed_melee_pick_up = true;
            global.one_handed_melee_collision = true;
        }
    //}
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Death_Particle_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Death_Particle_0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Parent_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm_zero = 20;
knock_back_speed = 15;

//Stun animation for down left
if  ((sprite_index = spr_Body_Standard_Idle_Down_Left) or
    (sprite_index = spr_Body_Standard_Walking_Down_Left)) and

    ((obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Right_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy)) {
    
    //Dylan, try doing it for each of the directions, you have to adjust it as shown below
    //I think you'll get it pretty quickly, all you have to do is change the number since
    //it'll adjust the positioning of the animation for the body part and it'll sync
    //back to idle since the idle coordinates are already adjusted. I did the first two as
    //an example, possibly not all of the body parts for each direction needs adjusting,
    //you're going to need to test each one repeatedly until you get the desired result.
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left;
    
    if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) {
    
        obj_Rat_Head.x = obj_Rat_Head.x + 5;
        obj_Rat_Head.y = obj_Rat_Head.y + 20;
    }
    
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Down_Left;
    
    if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Down_Left) {
    
        obj_Rat_Front_Arm.x = obj_Rat_Head.x + 5;
        obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
    }
    
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Down_Left;
    sprite_index = spr_Body_Standard_Stun_Down_Left;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Down_Left;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Down_Left;
    
    //This is where it ends for your coding for this specific animation, all the other stuff is working completely fine
    //the rest of the directions is just rinse and repeat, look for the stun animations and
    //start using the if statements below the designated body part so its easier to find and
    //adjust if needed to in the future.
    
    obj_Rat_Head.image_speed = 0.4;
    obj_Rat_Front_Arm.image_speed = 0.4;
    obj_Rat_Back_Arm.image_speed = 0.4;
    image_speed = 0.4;
    obj_Rat_Legs.image_speed = 0.4;
    obj_Rat_Tail.image_speed = 0.4;
    
    obj_Rat_Head.collision_with_enemy = true;
    obj_Rat_Head.collision_damage = true;
    
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
    
    //Enemy AI
    if (obj_Parent_Enemy.enemy_right == true) {
        
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
    
    if (obj_Parent_Enemy.enemy_left == true) {
        
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
}

//Stun animation for down right
if  ((sprite_index = spr_Body_Standard_Idle_Down_Right) or
    (sprite_index = spr_Body_Standard_Walking_Down_Right)) and
    
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Right_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy) {
    
    //Start
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right;
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Down_Right;
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Down_Right;
    sprite_index = spr_Body_Standard_Stun_Down_Right;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Down_Right;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Down_Right;
    
    //End
    
    obj_Rat_Head.image_speed = 0.4;
    obj_Rat_Front_Arm.image_speed = 0.4;
    obj_Rat_Back_Arm.image_speed = 0.4;
    image_speed = 0.4;
    obj_Rat_Legs.image_speed = 0.4;
    obj_Rat_Tail.image_speed = 0.4;
    
    obj_Rat_Head.collision_with_enemy = true;
    obj_Rat_Head.collision_damage = true;
    
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
    
    //Enemy AI
    if (obj_Parent_Enemy.enemy_right == true) {
        
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
    
    if (obj_Parent_Enemy.enemy_left == true) {
    
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
}

//Stun animation for up left
if  ((sprite_index = spr_Body_Standard_Idle_Up_Left) or
    (sprite_index = spr_Body_Standard_Walking_Up_Left)) and
       
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Right_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy) {
    
    //Start
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left;
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Up_Left;
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Up_Left;
    sprite_index = spr_Body_Standard_Stun_Up_Left;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Up_Left;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Up_Left;
    
    //End
    
    obj_Rat_Head.image_speed = 0.4;
    obj_Rat_Front_Arm.image_speed = 0.4;
    obj_Rat_Back_Arm.image_speed = 0.4;
    image_speed = 0.4;
    obj_Rat_Legs.image_speed = 0.4;
    obj_Rat_Tail.image_speed = 0.4;
    
    obj_Rat_Head.collision_with_enemy = true;
    obj_Rat_Head.collision_damage = true;
    
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
    
    //Enemy AI
    if (obj_Parent_Enemy.enemy_right == true) {
    
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
    
    if (obj_Parent_Enemy.enemy_left == true) {
    
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
}

//Stun animation for up right 
if  ((sprite_index = spr_Body_Standard_Idle_Up_Right) or
    (sprite_index = spr_Body_Standard_Walking_Up_Right)) and
    
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Walking_Right_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy) or
    (obj_Parent_Enemy.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy) {

    //Start
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right;
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Up_Right;
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Up_Right;
    sprite_index = spr_Body_Standard_Stun_Up_Right;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Up_Right;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Up_Right;
    
    //End
    
    obj_Rat_Head.image_speed = 0.4;
    obj_Rat_Front_Arm.image_speed = 0.4;
    obj_Rat_Back_Arm.image_speed = 0.4;
    image_speed = 0.4;
    obj_Rat_Legs.image_speed = 0.4;
    obj_Rat_Tail.image_speed = 0.4;
    
    obj_Rat_Head.collision_with_enemy = true;
    obj_Rat_Head.collision_damage = true;
    
    instance_create(obj_Rat_Head.x, obj_Rat_Head.y, obj_Screen_Shaker);
    
    //Enemy AI
    if (obj_Parent_Enemy.enemy_right == true) {
    
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Right_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
    
    if (obj_Parent_Enemy.enemy_left == true) {
    
        other.sprite_index = obj_Parent_Enemy.sprite_index_Idle_Left_Enemy
        other.enemy_speed = 0;
        alarm[0] = alarm_zero;
    }
}

///////////////////////////////////////////////////////////
//Don't worry about this, there is a little bug where the rat is able to be hit when he's in
//hitstun but I already know how to fix it, I'm just leaving it for a later time, possibly
//after you are done coding

//Knockback for collision

obj_Rat_Head.direction = point_direction(obj_Parent_Enemy.x, obj_Parent_Enemy.y, obj_Rat_Body.x, obj_Rat_Body.y)    
obj_Rat_Body.direction = point_direction(obj_Parent_Enemy.x, obj_Parent_Enemy.y, obj_Rat_Body.x, obj_Rat_Body.y)
obj_Rat_Front_Arm.direction = point_direction(obj_Parent_Enemy.x, obj_Parent_Enemy.y, obj_Rat_Body.x, obj_Rat_Body.y)     
obj_Rat_Back_Arm.direction = point_direction(obj_Parent_Enemy.x, obj_Parent_Enemy.y, obj_Rat_Body.x, obj_Rat_Body.y)
obj_Rat_Legs.direction = point_direction(obj_Parent_Enemy.x, obj_Parent_Enemy.y, obj_Rat_Body.x, obj_Rat_Body.y)     
obj_Rat_Tail.direction = point_direction(obj_Parent_Enemy.x, obj_Parent_Enemy.y, obj_Rat_Body.x, obj_Rat_Body.y)

obj_Rat_Head.speed = knock_back_speed;    
obj_Rat_Body.speed = knock_back_speed;
obj_Rat_Front_Arm.speed = knock_back_speed;     
obj_Rat_Back_Arm.speed = knock_back_speed;
obj_Rat_Legs.speed = knock_back_speed;     
obj_Rat_Tail.speed = knock_back_speed;

alarm[1] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Parent_Gun">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////////////////////////////////////////////////////////////////////Weilding guns////////////////////////////////////////////////////////////////////

if (//Walking Animation
    ((sprite_index = spr_Body_Standard_Walking_Down_Left) and (gun_collision == false)) and 
    ((obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Left_Gun_In_Use) or
    (obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Right_Gun_In_Use))) {
    
    //with (other) {
    
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
        
        other.sprite_index = obj_Parent_Gun.sprite_index_Left_Gun_In_Use;
        weapon_attach_left_arm = true;
        weapon_picked_up = true;
        gun_collision = true;
    //}
}

if (//Walking Animation
    ((sprite_index = spr_Body_Standard_Walking_Down_Right) and (gun_collision == false)) and 
    ((obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Left_Gun_In_Use) or
    (obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Right_Gun_In_Use))) {
    
    //with (other) {
    
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    
        other.sprite_index = obj_Parent_Gun.sprite_index_Right_Gun_In_Use;
        weapon_attach_right_arm = true;
        weapon_picked_up = true;
        gun_collision = true;
    //}
}

if (//Walking Animation
    ((sprite_index = spr_Body_Standard_Walking_Up_Left) and (gun_collision == false)) and 
    ((obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Left_Gun_In_Use) or
    (obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Right_Gun_In_Use))) {
    
    //with (other) {
    
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    
        other.sprite_index = obj_Parent_Gun.sprite_index_Left_Gun_In_Use;
        weapon_attach_left_arm = true;
        weapon_picked_up = true;
        gun_collision = true;
    //}
}

if (//Walking Animation
    ((sprite_index = spr_Body_Standard_Walking_Up_Right) and (gun_collision == false)) and 
    ((obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Left_Gun_In_Use) or
    (obj_Parent_Gun.sprite_index = obj_Parent_Gun.sprite_index_Right_Gun_In_Use))) {
    
    //with (other) {
    
        other.x = obj_Rat_Front_Arm.x;
        other.y = obj_Rat_Front_Arm.y;
    
        other.sprite_index = obj_Parent_Gun.sprite_index_Right_Gun_In_Use;
        weapon_attach_right_arm = true;
        weapon_picked_up = true;
        gun_collision = true;
    //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Left) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Down_Left) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Down_Left) and
    (sprite_index = spr_Body_Standard_Stun_Down_Left) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Down_Left) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Down_Left) and 
    (obj_Rat_Head.Player_Health &gt; 0) {
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Left;
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Down_Left;
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Idle_Down_Left;
    sprite_index = spr_Body_Standard_Idle_Down_Left;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Idle_Down_Left;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Idle_Down_Left;
    
    obj_Rat_Head.collision_with_enemy = false;
}

if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Left) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Up_Left) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Up_Left) and
    (sprite_index = spr_Body_Standard_Stun_Up_Left) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Up_Left) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Up_Left) and 
    (obj_Rat_Head.Player_Health &gt; 0) {
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Left;
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Up_Left;
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Idle_Up_Left;
    sprite_index = spr_Body_Standard_Idle_Up_Left;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Idle_Up_Left;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Idle_Up_Left;
    
    obj_Rat_Head.collision_with_enemy = false;
}

if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Down_Right) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Down_Right) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Down_Right) and
    (sprite_index = spr_Body_Standard_Stun_Down_Right) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Down_Right) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Down_Right) and 
    (obj_Rat_Head.Player_Health &gt; 0) {
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Down_Right;
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Down_Right;
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Idle_Down_Right;
    sprite_index = spr_Body_Standard_Idle_Down_Right;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Idle_Down_Right;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Idle_Down_Right;
    
    obj_Rat_Head.collision_with_enemy = false;
}

if (obj_Rat_Head.sprite_index = spr_Head_Standard_Stun_Up_Right) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Stun_Up_Right) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Stun_Up_Right) and
    (sprite_index = spr_Body_Standard_Stun_Up_Right) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Stun_Up_Right) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Stun_Up_Right) and 
    (obj_Rat_Head.Player_Health &gt; 0) {
    
    obj_Rat_Head.sprite_index = spr_Head_Standard_Idle_Up_Right;
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Up_Right;
    obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Idle_Up_Right;
    sprite_index = spr_Body_Standard_Idle_Up_Right;
    obj_Rat_Legs.sprite_index = spr_Legs_Standard_Idle_Up_Right;
    obj_Rat_Tail.sprite_index = spr_Tail_Standard_Idle_Up_Right;
    
    obj_Rat_Head.collision_with_enemy = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>2</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>2</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>10</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,14</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
