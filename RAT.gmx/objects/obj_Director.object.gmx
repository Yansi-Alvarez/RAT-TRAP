<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variable to know when level is done being made
globalvar finished_level_generation;

global.generation = true;

//Initializing the variable to equal zero, showing it is yet to be finished
finished_level_generation = 0;

//Creating a new level every time the game starts up
randomize();

//Size of the grid used to generate the objects, it is 64 since
//the wall and floor are of that size
//**40 by 30 size grid**

grid_size = 64;

//Variable to store the size of the rooms
room_size = noone;

//Variable to store the room generation chance 
room_generation_chance = noone;

//The center of the room through its width, has to be divisible by 64
global.center_room_width = room_width/2

//The center of the room through its height, has to be divisible by 64
global.center_room_height = room_height/2

//The width and height have to be divisble by 64 so the level maker can be aligned
//with the room and place everything aligned to each other

//Activation for the enemy AI
global.enemy_activation = false;

//Speed of the level maker, has to be same as grid width (64 for now) 
//so it can the objects can be aligned
global.level_maker_speed = 64;

global.create_central_room = false;

global.create_boundary = false;

global.first_level_maker_creation = false;

////////////////////////////////////////////////////////////////////////////////

grid_width = (room_width/global.level_maker_speed) + 1; 
grid_height = (room_height/global.level_maker_speed) + 1;

grid_width_index = ((room_width/global.level_maker_speed)); 
grid_height_index = ((room_height/global.level_maker_speed));

grid_map = ds_grid_create(grid_width, grid_height);
id_value = noone;

//Assign every cell in the grid to noone
for (i = 0; i &lt; grid_width; i += 1) {

    for (j = 0; j &lt; grid_height; j += 1) {
        
        //Assigning all the cells a value of zero
        ds_grid_set(grid_map, i, j, 0);
    }
}

for (i = 0; i &lt; grid_width; i += 1) {

    for (j = 0; j &lt; grid_height; j += 1) {
        
        if ((i &gt; 0) and (i &lt; grid_width_index - 5)) 
        and ((j &gt; 0) and (j &lt; grid_height_index - 5)) {
            
            randomize();
            room_size = choose(3, 4, 5, 6);
            room_generation_chance = irandom(50);
            
            for (l = 0; l &lt;= room_size; l++) {
                
                if (room_generation_chance &lt;= 10) {
            
                    if (((i + room_size) &lt; grid_width_index) and ((j + room_size) &lt; grid_height_index))
                    and (ds_grid_get(grid_map, (i - 1), (j - 1)) == 0)
                    and (ds_grid_get(grid_map, i + l, (j - 1)) == 0)
                    and (ds_grid_get(grid_map, (i - 1), j + l) == 0)
                    and (ds_grid_get(grid_map, (i + room_size), j + l) == 0)
                    and (ds_grid_get(grid_map, i + (l - 1), (j + room_size)) == 0) {

                        //Tile set/floor will have a value of 1
                        
                        if (i &lt; (grid_width_index - room_size)) and (j &lt; grid_height_index - room_size) {
                            
                            for (m = 0; m &lt; room_size; m++) {
                                
                                for (n = 0; n &lt; room_size; n++) {
                            
                                    ds_grid_set(grid_map, (i + m), (j + n), 1);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
/*
for (i = 0; i &lt; grid_width; i += 1) {

    for (j = 0; j &lt; grid_height; j += 1) {
    
        if ((ds_grid_get(grid_map, i - 1, j) == 0) and (ds_grid_get(grid_map, i + 1, j) == 0)) 
        or ((ds_grid_get(grid_map, i, j - 1) == 0) and (ds_grid_get(grid_map, i, j + 1) == 0)) 
        or ((ds_grid_get(grid_map, i, j - 1) == 0) and (ds_grid_get(grid_map, i, j + 1) == 0) and ((ds_grid_get(grid_map, i - 1, j) == 0) or (ds_grid_get(grid_map, i + 1, j) == 0))) 
        or ((ds_grid_get(grid_map, i - 1, j) == 0) and (ds_grid_get(grid_map, i + 1, j) == 0) and ((ds_grid_get(grid_map, i, j - 1) == 0) or (ds_grid_get(grid_map, i, j + 1) == 0)))
        or ((ds_grid_get(grid_map, i - 1, j) == 0) and (ds_grid_get(grid_map, i + 1, j) == 0) and (ds_grid_get(grid_map, i, j - 1) == 0) and (ds_grid_get(grid_map, i, j + 1) == 0)) {
            
            ds_grid_set(grid_map, i, j, 0);
        }
    }
}
*/
////////////////////////////////////////////////////////////////////////////////

instance_create(global.center_room_width, global.center_room_height, obj_Level_Maker);

////////////////////////////////////////////////////////////////////////////////
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
