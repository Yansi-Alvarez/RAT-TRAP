<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Front_Arm_Standard_Idle_Down_Left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.3;

sprite_index = spr_Front_Arm_Standard_Idle_Down_Left;

hspeed = 0;

vspeed = 0;

walk_up_left = false;
walk_up_right = false;
walk_down_left = false;
walk_down_right = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if  ((global.direction_player &gt;= 0) and (global.direction_player &lt;= 89)) and (walk_up_right == false) and (obj_Rat_Head.collision_with_enemy == false) {

    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Up_Right;
    
    if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Up_Right) {
        obj_Rat_Front_Arm.x = obj_Rat_Head.x + 5;
        obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
    }
    
    obj_Rat_Front_Arm.depth = 0;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
    
        if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Walking_Up_Right) {
            obj_Rat_Front_Arm.x = obj_Rat_Head.x + 5;
            obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
            
            walk_up_right = true;
        }
    }
}

if ((global.direction_player &gt;= 90) and (global.direction_player &lt;= 179)) and (walk_up_left == false) and (obj_Rat_Head.collision_with_enemy == false) {

    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Up_Left;
    
    if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Up_Left) {
        obj_Rat_Front_Arm.x = obj_Rat_Head.x - 5;
        obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
    }
    
    obj_Rat_Front_Arm.depth = 0;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Walking_Up_Left;
        
        if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Walking_Up_Left) {
            obj_Rat_Front_Arm.x = obj_Rat_Head.x - 5;
            obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
        }
        
        walk_up_left = true;
    }
}

if ((global.direction_player &gt;= 180) and (global.direction_player &lt;= 269)) and (walk_down_left == false) and (obj_Rat_Head.collision_with_enemy == false) {

    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Down_Left;
    
    if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Down_Left) {
        obj_Rat_Front_Arm.x = obj_Rat_Head.x + 5;
        obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
    }
    
    obj_Rat_Front_Arm.depth = 0;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
    
        if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Walking_Down_Left) {
            obj_Rat_Front_Arm.x = obj_Rat_Head.x + 5;
            obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
        }
        
        walk_down_left = true;
    }
}

if ((global.direction_player &gt;= 270) and (global.direction_player &lt;= 359)) and (walk_down_right == false) and (obj_Rat_Head.collision_with_enemy == false) {
    
    obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Down_Right;
    
    if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Idle_Down_Right) {
        obj_Rat_Front_Arm.x = obj_Rat_Head.x - 5;
        obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
    }
    
    obj_Rat_Front_Arm.depth = 0;
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        if (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Walking_Down_Right) {
            obj_Rat_Front_Arm.x = obj_Rat_Head.x - 5;
            obj_Rat_Front_Arm.y = obj_Rat_Head.y + 20;
        }
        
        walk_down_right = true;
    }
}

if keyboard_check(ord('D')) {

    image_speed = 0.3;
    hspeed = 5; 
}

if keyboard_check(ord('A')) {

    image_speed = 0.3;
    hspeed = -5;
}

if keyboard_check(ord('W')) {

    image_speed = 0.3;
    vspeed = -5; 
}

if keyboard_check(ord('S')) {

    image_speed = 0.3;
    vspeed = 5;
}

if keyboard_check_released(ord('D')) {

    image_speed = 0.3;
    hspeed = 0; 
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('A')) {

    image_speed = 0.3;
    hspeed = 0;  
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('W')) {

    image_speed = 0.3;
    vspeed = 0; 
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('S')) {

    image_speed = 0.3;
    vspeed = 0;  
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>2</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>2</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>10</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,17</point>
    <point>11,11</point>
  </PhysicsShapePoints>
</object>
