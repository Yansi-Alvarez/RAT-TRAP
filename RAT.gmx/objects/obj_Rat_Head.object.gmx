<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Head_Standard_Idle_Down_Left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.screen_shake = noone;

//view_visible[0] = 0;

//view_visible[1] = 1;

room_speed = 30;

head = false;

cursor = false;

walk_up_left = false;

walk_up_right = false;

walk_down_left = false;

walk_down_right = false;

particle_destroy = false;

death = false;

image_speed = 0.3;

sprite_index = spr_Head_Standard_Idle_Down_Left;

hspeed = 0;

vspeed = 0;

img_index = 0;

Player_Health = 5;

global.direction_player = noone;

//Body Parts
instance_create(obj_Rat_Head.x + 7, obj_Rat_Head.y + 11, obj_Rat_Body)
instance_create(obj_Rat_Head.x + 5, obj_Rat_Head.y + 20, obj_Rat_Front_Arm)
instance_create(obj_Rat_Head.x + 5, obj_Rat_Head.y + 25, obj_Rat_Legs)
instance_create(obj_Rat_Head.x - 7, obj_Rat_Head.y + 15, obj_Rat_Back_Arm)
instance_create(obj_Rat_Head.x + 12, obj_Rat_Head.y + 16, obj_Rat_Tail)

//Cursor Code
instance_create(mouse_x, mouse_y, obj_Cursor)

global.enemy_activation = true;

//instance_create(obj_Rat_Head.x + 100,obj_Rat_Head.y,obj_Sword)

instance_create(obj_Rat_Head.x + 75,obj_Rat_Head.y,obj_Potato_Handgun)

//instance_create(obj_Rat_Head.x + 100,obj_Rat_Head.y,obj_Potato_Handgun)

//instance_create(obj_Rat_Head.x + 150, obj_Rat_Head.y + 200, obj_Bullbug)
/*
instance_create(obj_Rat_Head.x + 150, obj_Rat_Head.y + 220, obj_Bullbug)

instance_create(obj_Rat_Head.x + 150, obj_Rat_Head.y + 240, obj_Bullbug)

instance_create(obj_Rat_Head.x + 150, obj_Rat_Head.y + 260, obj_Bullbug)

instance_create(obj_Rat_Head.x + 150, obj_Rat_Head.y + 280, obj_Bullbug)

instance_create(obj_Rat_Head.x + 170, obj_Rat_Head.y + 200, obj_Bullbug)

instance_create(obj_Rat_Head.x + 190, obj_Rat_Head.y + 220, obj_Bullbug)

instance_create(obj_Rat_Head.x + 210, obj_Rat_Head.y + 240, obj_Bullbug)

instance_create(obj_Rat_Head.x + 230, obj_Rat_Head.y + 260, obj_Bullbug)

instance_create(obj_Rat_Head.x + 250, obj_Rat_Head.y + 280, obj_Bullbug)

//instance_create(obj_Rat_Head.x + 150, obj_Rat_Head.y + 250, obj_Bullbug)
*/
instance_create(obj_Rat_Head.x - 75, obj_Rat_Head.y, obj_Beretta)

//instance_create(obj_Rat_Head.x - 50, obj_Rat_Head.y, obj_Pump_Shotgun)

instance_create(obj_Rat_Head.x, obj_Rat_Head.y + 75, obj_AR15)

instance_create(obj_Rat_Head.x, obj_Rat_Head.y - 75, obj_P90)

collision_with_enemy = false;

collision_damage = false;

correction = noone;

correction_2 = noone;

//global.weapon_type = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Gun Attachment Code for the left arm while dual weidling

if (global.weapon_attach_left_arm == true) and (global.weapon_picked_up_again = true) {
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm while dual weilding

if (global.weapon_attach_right_arm == true) and (global.weapon_picked_up_again = true) {
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if (global.gun_2_collision == true) {
if (global.weapon_attach_left_arm == true) and (global.weapon_picked_up = true) {
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm

if (global.weapon_attach_right_arm == true) and (global.weapon_picked_up = true) {
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun_2.x = obj_Rat_Back_Arm.x;
        obj_Gun_2.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
        obj_Gun_2.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun_2.x = obj_Rat_Front_Arm.x;
        obj_Gun_2.y = obj_Rat_Front_Arm.y;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Gun Attachment Code for the left arm while dual weidling

if (global.weapon_attach_left_arm == true) and (global.weapon_picked_up_again = true) {
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }
    
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Gun Attachment Code for the right arm while dual weilding

if (global.weapon_attach_right_arm == true) and (global.weapon_picked_up_again = true) {
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }

//////////////////////////////////////////////////////////////////
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Left;
        obj_Gun.x = obj_Rat_Front_Arm.x;
        obj_Gun.y = obj_Rat_Front_Arm.y;
    }
    
    if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
        obj_Gun.sprite_index = spr_Handgun_Potato_Right;
        obj_Gun.x = obj_Rat_Back_Arm.x;
        obj_Gun.y = obj_Rat_Back_Arm.y;
    }
}
}*/
    
//Gun Attachment Code for the left arm
//if (global.one_handed_melee_collision == true) {
/*
    if (global.weapon_attach_left_arm == true) and (obj_Rat_Body.weapon_picked_up = true) and (global.weapon_attach_right_arm == false) and (global.one_handed_melee_collision == true) {
        
        if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
    
    //////////////////////////////////////////////////////////////////
        
        if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
    }
    //////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
    
    //Gun Attachment Code for the right arm
    
    if (global.weapon_attach_right_arm == true) and (obj_Rat_Body.weapon_picked_up = true) and (global.weapon_attach_left_arm == false) and (global.one_handed_melee_collision == true) {
        
        if (sprite_index = spr_Head_Standard_Idle_Down_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Idle_Down_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Idle_Up_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Idle_Up_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
    
    //////////////////////////////////////////////////////////////////
        
        if (sprite_index = spr_Head_Standard_Walking_Down_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Walking_Down_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Walking_Up_Left) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Right_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Back_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Back_Arm.y;
        }
        
        if (sprite_index = spr_Head_Standard_Walking_Up_Right) {
            global.obj_One_Handed_Melee_In_Use.sprite_index = global.sprite_index_Left_One_Handed_Melee_In_Use;
            global.obj_One_Handed_Melee_In_Use.x = obj_Rat_Front_Arm.x;
            global.obj_One_Handed_Melee_In_Use.y = obj_Rat_Front_Arm.y;
        }
    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((Player_Health == 5) or (Player_Health == 4)) {
    img_index += 1.0
}

if ((Player_Health == 3) or (Player_Health == 2)) {
    img_index += 2.0
}

if (Player_Health == 1) {
    img_index += 4.0
}

    //Loss of heath from collision
if (collision_damage == true) {

    obj_Rat_Head.Player_Health -= obj_Parent_Enemy.contact_damage;
    collision_damage = false;
}

/*
if (img_index &gt; sprite_get_number(spr_Full_Health)) or (img_index &gt; sprite_get_number(spr_Medium_Health)) or (img_index &gt; sprite_get_number(spr_Low_Health)) {
    img_index = 0
}
*/

if (Player_Health &lt;= 0) {

    //draw_self();
    //draw_sprite(spr_Low_Health, floor(img_index), (view_xview[0] + 560),(view_yview[0] + 410));
    
    if (sprite_index = spr_Head_Standard_Idle_Down_Left) or 
    (sprite_index = spr_Head_Standard_Walking_Down_Left) or 
    (sprite_index = spr_Head_Standard_Stun_Down_Left) {
        
        sprite_index = spr_Head_Standard_Death_Down_Left;
        obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Down_Left;
        obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Down_Left;
        obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Down_Left;
        obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Down_Left;
        obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Down_Left;
        
        image_speed = 0.2;
        obj_Rat_Body.image_speed = 0.2;
        obj_Rat_Front_Arm.image_speed = 0.2;
        obj_Rat_Back_Arm.image_speed = 0.2;
        obj_Rat_Legs.image_speed = 0.2;
        obj_Rat_Tail.image_speed = 0.2;
    }
    
        if (sprite_index = spr_Head_Standard_Idle_Down_Right) or 
    (sprite_index = spr_Head_Standard_Walking_Down_Right) or 
    (sprite_index = spr_Head_Standard_Stun_Down_Right) {
    
        sprite_index = spr_Head_Standard_Death_Down_Right;
        obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Down_Right;
        obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Down_Right;
        obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Down_Right;
        obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Down_Right;
        obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Down_Right;
        
        image_speed = 0.3;
        obj_Rat_Body.image_speed = 0.3;
        obj_Rat_Front_Arm.image_speed = 0.3;
        obj_Rat_Back_Arm.image_speed = 0.3;
        obj_Rat_Legs.image_speed = 0.3;
        obj_Rat_Tail.image_speed = 0.3;
    }
    
        if (sprite_index = spr_Head_Standard_Idle_Up_Left) or 
    (sprite_index = spr_Head_Standard_Walking_Up_Left) or 
    (sprite_index = spr_Head_Standard_Stun_Up_Left) {
    
        sprite_index = spr_Head_Standard_Death_Up_Left;
        obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Up_Left;
        obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Up_Left;
        obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Up_Left;
        obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Up_Left;
        obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Up_Left;
        
        image_speed = 0.3;
        obj_Rat_Body.image_speed = 0.3;
        obj_Rat_Front_Arm.image_speed = 0.3;
        obj_Rat_Back_Arm.image_speed = 0.3;
        obj_Rat_Legs.image_speed = 0.3;
        obj_Rat_Tail.image_speed = 0.3;
    }
    
        if (sprite_index = spr_Head_Standard_Idle_Up_Right) or 
    (sprite_index = spr_Head_Standard_Walking_Up_Right) or 
    (sprite_index = spr_Head_Standard_Stun_Up_Right) {
    
        sprite_index = spr_Head_Standard_Death_Up_Right;
        obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Up_Right;
        obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Up_Right;
        obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Up_Right;
        obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Up_Right;
        obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Up_Right;
        
        image_speed = 0.3;
        obj_Rat_Body.image_speed = 0.3;
        obj_Rat_Front_Arm.image_speed = 0.3;
        obj_Rat_Back_Arm.image_speed = 0.3;
        obj_Rat_Legs.image_speed = 0.3;
        obj_Rat_Tail.image_speed = 0.3;
    }
}

obj_Cursor.x = mouse_x;
obj_Cursor.y = mouse_y;

global.direction_player = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, obj_Cursor.x, obj_Cursor.y)
//obj_Rat_Head.image_angle = global.direction_player - correction;

//Angle of player, if between 0 and 89 degrees, looks to the up-right

if  ((global.direction_player &gt;= 0) and (global.direction_player &lt;= 89)) and (walk_up_right == false) and (collision_with_enemy == false) {

    sprite_index = spr_Head_Standard_Idle_Up_Right;
    obj_Rat_Head.depth = 2;
    
    if (global.weapon_attach_left_arm == true) and (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 2;
        //obj_Gun_2.depth = 2;
    }
        
    if (global.one_handed_melee_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        global.obj_One_Handed_Melee_In_Use.depth = 2;
    }
    
    if (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 0;
        //obj_Gun_2.depth = 0;
    }
        
    if (global.one_handed_melee_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        global.obj_One_Handed_Melee_In_Use.depth = 0;
    }
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        sprite_index = spr_Head_Standard_Walking_Up_Right; 
        
        walk_up_right = true;
    }
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Angle of player, if between 90 and 179 degrees, looks to the up-left

if ((global.direction_player &gt;= 90) and (global.direction_player &lt;= 179)) and (walk_up_left == false) and (collision_with_enemy == false) {
    
    sprite_index = spr_Head_Standard_Idle_Up_Left;
    obj_Rat_Head.depth = 2;
    
    if (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 0;
        //obj_Gun_2.depth = 0;
    }
        
    if (global.one_handed_melee_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
    
        global.obj_One_Handed_Melee_In_Use.depth = 0;
    }
    
    if (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 2;
        //obj_Gun_2.depth = 2;
    }
    
    if (global.one_handed_melee_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
    
        global.obj_One_Handed_Melee_In_Use.depth = 2;
    }

    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        sprite_index = spr_Head_Standard_Walking_Up_Left;
        
        walk_up_left = true;
    } 
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Angle of player, if between 180 and 269 degrees, looks to the down-left

if ((global.direction_player &gt;= 180) and (global.direction_player &lt;= 269)) and (walk_down_left == false) and (collision_with_enemy == false) {

    sprite_index = spr_Head_Standard_Idle_Down_Left;
    obj_Rat_Head.depth = 0;
    
    if (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 0;
        //obj_Gun_2.depth = 0;
    }
    
    if (global.one_handed_melee_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
    
        global.obj_One_Handed_Melee_In_Use.depth = 0;
    }
    
    if (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 1;
        //obj_Gun_2.depth = 0;
    }

    if (global.one_handed_melee_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
    
        global.obj_One_Handed_Melee_In_Use.depth = 1;
    }
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        sprite_index = spr_Head_Standard_Walking_Down_Left;
        
        walk_down_left = true;
    }  
}

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//Angle of player, if between 270 and 359 degrees, looks to the down-right

if ((global.direction_player &gt;= 270) and (global.direction_player &lt;= 359)) and (walk_down_right == false) and (collision_with_enemy == false) {

    sprite_index = spr_Head_Standard_Idle_Down_Right;
    obj_Rat_Head.depth = 0;
    
    if (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
        
        obj_Rat_Body.depth = 1;
        //obj_Gun_2.depth = 1;
    }
        
    if (global.one_handed_melee_collision == true) and (global.weapon_attach_left_arm == true) and (global.weapon_attach_right_arm == false) {
    
        global.obj_One_Handed_Melee_In_Use.depth = 1;
    }
    
    if (obj_Parent_Gun.gun_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
        
        obj_Rat_Body.depth = 0;
        //obj_Gun_2.depth = 0;
    }
    
    if (global.one_handed_melee_collision == true) and (global.weapon_attach_right_arm == true) and (global.weapon_attach_left_arm == false) {
    
        global.obj_One_Handed_Melee_In_Use.depth = 0;
    }
    
    if (keyboard_check(ord('D')) or keyboard_check(ord('A')) or keyboard_check(ord('W')) or keyboard_check(ord('S'))) {
        
        sprite_index = spr_Head_Standard_Walking_Down_Right;
        
        walk_down_right = true;
    }
} 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

correction = 160;
correction_2 = 200;

//Angle of head when looking up right

if (global.direction_player &gt;= 0) and (global.direction_player &lt;= 30) {

    image_angle = global.direction_player;
}

if (global.direction_player &gt;= 31) and (global.direction_player &lt;= 89) {
    
    image_angle = 31;
}

//Angle of head when looking up left

if (global.direction_player &gt;= 90) and (global.direction_player &lt;= 130) {

    image_angle = 131 - correction;
}

if (global.direction_player &gt;= 131) and (global.direction_player &lt;= 179) {

    image_angle = global.direction_player - correction;
}

//Angle of head when looking down left

if (global.direction_player &gt;= 180) and (global.direction_player &lt;= 220) {

    image_angle = global.direction_player + correction_2;
}

if (global.direction_player &gt;= 221) and (global.direction_player &lt;= 269) {

    image_angle = 221 + correction_2;
}

//Angle of head when looking down right

if (global.direction_player &gt;= 270) and (global.direction_player &lt;= 310) {

    image_angle = 310;
}

if (global.direction_player &gt;= 311) and (global.direction_player &lt;= 359) {

    image_angle = global.direction_player;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if keyboard_check(ord('D')) {

    image_speed = 0.3;
    hspeed = 5; 
}

if keyboard_check(ord('A')) {

    image_speed = 0.3;
    hspeed = -5;
}

if keyboard_check(ord('W')) {

    image_speed = 0.3;
    vspeed = -5; 
}

if keyboard_check(ord('S')) {

    image_speed = 0.3;
    vspeed = 5;
}
    
if keyboard_check_released(ord('D')) {

    image_speed = 0.3;
    hspeed = 0; 
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('A')) {

    image_speed = 0.3;
    hspeed = 0;  
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('W')) {

    image_speed = 0.3;
    vspeed = 0; 
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}

if keyboard_check_released(ord('S')) {

    image_speed = 0.3;
    vspeed = 0;  
    
    walk_up_left = false;
    walk_up_right = false;
    walk_down_left = false;
    walk_down_right = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Death_Particle_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Death_Particle_0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((sprite_index = spr_Head_Standard_Death_Down_Left) and
    (obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Down_Left) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Down_Left) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Down_Left) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Down_Left) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Down_Left)) or
    
    ((sprite_index = spr_Head_Standard_Death_Down_Right) and
    (obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Down_Right) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Down_Right) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Down_Right) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Down_Right) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Down_Right)) or
    
    ((sprite_index = spr_Head_Standard_Death_Up_Left) and
    (obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Up_Left) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Up_Left) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Up_Left) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Up_Left) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Up_Left)) or
    
    ((sprite_index = spr_Head_Standard_Death_Up_Right) and
    (obj_Rat_Body.sprite_index = spr_Body_Standard_Death_Up_Right) and
    (obj_Rat_Front_Arm.sprite_index = spr_Front_Arm_Standard_Death_Up_Right) and
    (obj_Rat_Back_Arm.sprite_index = spr_Back_Arm_Standard_Death_Up_Right) and
    (obj_Rat_Legs.sprite_index = spr_Legs_Standard_Death_Up_Right) and
    (obj_Rat_Tail.sprite_index = spr_Tail_Standard_Death_Up_Right)) {
    
    if (death == false) {
    
        audio_play_sound(snd_Death, 1, 0);
    
        instance_create(x, y, obj_Death);
        instance_create(x + 7, y + 11, obj_Death);
        instance_create(x + 5, y + 20, obj_Death);
        instance_create(x - 7, y + 15, obj_Death);
        instance_create(x + 5, y + 25, obj_Death);
        instance_create(x + 12, y + 16, obj_Death);

        death = true;
    }
    
    with (obj_Rat_Head) {
        
        image_alpha = 0;
    }  
    
    with (obj_Rat_Body) {
        
        image_alpha = 0;
    }  
    
    with (obj_Rat_Front_Arm) {
        
        image_alpha = 0;
    }  
    
    with (obj_Rat_Back_Arm) {
        
        image_alpha = 0;
    }  
    
    with (obj_Rat_Legs) {

        image_alpha = 0;
    }  
    
    with (obj_Rat_Tail) {
    
        image_alpha = 0;
    }  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*
if (Player_Health == 5) or (Player_Health == 4) {

    draw_sprite(spr_Full_Health, floor(img_index), (view_xview[1] + 560),(view_yview[1] + 410));
    
}

if (Player_Health == 3) or (Player_Health == 2) {

    draw_sprite(spr_Medium_Health, floor(img_index), (view_xview[1] + 560),(view_yview[1] + 410));
    
}

if (Player_Health &lt;= 1) {

    draw_sprite(spr_Low_Health, floor(img_index), (view_xview[1] + 560),(view_yview[1] + 410));
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>2</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>2</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>10</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,13</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
