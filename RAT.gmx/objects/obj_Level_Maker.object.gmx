<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

speed = global.level_maker_speed;
direction = choose(0, 90, 180, 270); 

//global.reference_angle = point_direction(obj_Reference_Angle.x, obj_Reference_Angle.y, obj_Level_Maker.x, obj_Level_Maker.y);

//Time allowed to generate the level
floor_generation_time = 1500/(instance_number(obj_Level_Maker) + 1);

wall_generation_time = 1800;

//Time until it changes directions
//direction_change = irandom(30) + 10;

//Probability of carving a room
room_chance = 0;

//Rooms width while generating (not actual level but rooms within level)
//generated_room_width = noone;//choose(2, 3, 4, 5);

//Rooms height while generating (not actual level but rooms within level)
//generated_room_height = noone;//choose(2, 3, 4, 5);

//Floor for the level
level_floor = obj_Concrete_Floor;
//level_floor = choose(obj_Concrete_Floor, obj_Concrete_Floor_Alt, obj_Concrete_Floor_Alt_2);

//Wall for the level
level_wall = obj_Wall_Lab_Down;

//Preventing the spawn of another level maker, will be used later
spawn_level_maker = 1;

//Preventing the spawn of another level maker, will be used later
spawn_level_maker_chance = 1;

//Size of spawn room
spawn_room_size = 1;

//Half of the width to prevent the level maker from going to the edges of the level
half_width = view_wview[1]/2;

//Half of the height to prevent the level maker from going to the edges of the level
half_height = view_hview[1]/2;

////////////////////////////////////////////////////////////////////////////////

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if (ds_grid_get(obj_Director.grid_map, i, j) == 1) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), level_floor); 
        }
    }
}

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Down is 10
//Up is 11
//Right is 12
//Left is 13
//Full is 14

        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Down);
            instance_create((i * global.level_maker_speed), ((j + 1) * global.level_maker_speed), obj_Wall_Shadow);
            ds_grid_set(obj_Director.grid_map, i, j, 10);
        }
        
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Right); 
            ds_grid_set(obj_Director.grid_map, i, j, 12);
        }
        
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i - 1, j) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Left); 
            ds_grid_set(obj_Director.grid_map, i, j, 13);
        }
        
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
    }
}

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {

        if ((ds_grid_get(obj_Director.grid_map, i - 1, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 12)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Right); 
            ds_grid_set(obj_Director.grid_map, i, j, 12);
        }
        
        if ((ds_grid_get(obj_Director.grid_map, i - 1, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 13)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Left); 
            ds_grid_set(obj_Director.grid_map, i, j, 13);
        }
    }
}

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {

        if ((ds_grid_get(obj_Director.grid_map, i, j) == noone) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j) == 10)
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 12)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Right); 
            ds_grid_set(obj_Director.grid_map, i, j, 12);
        }
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == noone)
        and (ds_grid_get(obj_Director.grid_map, i - 1, j) == 10) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 13)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Left); 
            ds_grid_set(obj_Director.grid_map, i, j, 13);
        }
    }
}

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {

        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i, j - 1) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Up); 
            ds_grid_set(obj_Director.grid_map, i, j, 11);
        }
    }
}

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        //Generate blank walls for the outside
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Full); 
            ds_grid_set(obj_Director.grid_map, i, j, 14);
        } 
    }
}

            
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/*
//Enemy Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {

        //Enemy spawn
        
        enemy_spawn_chance = irandom(1000); 
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 1)) {   
        
            if (enemy_spawn_chance &lt;= 50) {
            
                instance_create((i * global.level_maker_speed) + 32, (j * global.level_maker_speed) + 32, obj_Bullbug);
                //ds_grid_add(obj_Director.grid_map, i, j, 1);
            }
        }
    }
}

//instance_create((room_width/2), (room_height/2), obj_Rat_Head);

/*
//Player Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        for (m = 0; m &lt;= 2; m += 1) {
        
            for (l = 0; l &lt;= 2; l += 1) {
            
                if ((ds_grid_get(obj_Director.grid_map, i + m, j + l)) == 1){
                
                    instance_create(i * global.level_maker_speed, j * global.level_maker_speed, obj_Rat_Head);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
