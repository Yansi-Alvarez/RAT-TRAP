<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

speed = global.level_maker_speed;
direction = choose(0, 90, 180, 270); 

//global.reference_angle = point_direction(obj_Reference_Angle.x, obj_Reference_Angle.y, obj_Level_Maker.x, obj_Level_Maker.y);

//Time allowed to generate the level
floor_generation_time = 1500/(instance_number(obj_Level_Maker) + 1);

wall_generation_time = 1800;

//Time until it changes directions
//direction_change = irandom(30) + 10;

//Probability of carving a room
room_chance = 0;

//Floor for the level
level_floor = obj_Concrete_Floor;
//level_floor = choose(obj_Concrete_Floor, obj_Concrete_Floor_Alt, obj_Concrete_Floor_Alt_2);

//Wall for the level
level_wall = obj_Wall_Lab_Down;

//Spawning
spawn = true;

////////////////////////////////////////////////////////////////////////////////

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if (ds_grid_get(obj_Director.grid_map, i, j) == 1) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), level_floor); 
        }
    }
}

////////////////////////////////////////////////////////////////////////////////

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 1)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Down);
            instance_create((i * global.level_maker_speed), ((j + 1) * global.level_maker_speed), obj_Wall_Shadow);
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        }
    }
}

for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        //Generate blank walls for the outside
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 0)) {
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Wall_Lab_Full); 
            ds_grid_set(obj_Director.grid_map, i, j, 2);
        } 
    }
}
    
////////////////////////////////////////////////////////////////
/*
//Prop Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        randomize();
        prop_spawn_chance = irandom(2000); 
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 0)) and (prop_spawn_chance &lt;= 100){
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Shelves);
            obj_Shelves.sprite_index = spr_Prop_Shelves_Right;
        }
        
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, (j + 1)) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i - 1), j) == 1)
        and (ds_grid_get(obj_Director.grid_map, (i + 1), j) == 0)) and (prop_spawn_chance &lt;= 100){
        
            instance_create((i * global.level_maker_speed), (j * global.level_maker_speed), obj_Shelves);
            obj_Shelves.sprite_index = spr_Prop_Shelves_Left;
        }
    }
}
*/
////////////////////////////////////////////////////////////////

//Player Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
    
        if ((ds_grid_get(obj_Director.grid_map, i, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 2) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 3) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 4) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 5) == 1)
        
        and (ds_grid_get(obj_Director.grid_map, i + 1, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 2, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 3, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 4, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 5) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 5, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 4) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 5) == 1)) 
        /*
        or
        
        ((ds_grid_get(obj_Director.grid_map, i, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i, j + 2) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 3) == 1)
        and (ds_grid_get(obj_Director.grid_map, i, j + 4) == 1)
        
        and (ds_grid_get(obj_Director.grid_map, i + 1, j) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 1, j + 4) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 2, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 2, j + 4) == 1) 
        
        and (ds_grid_get(obj_Director.grid_map, i + 3, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 3, j + 4) == 1)  
        
        and (ds_grid_get(obj_Director.grid_map, i + 4, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 4, j + 4) == 1)  
        
        and (ds_grid_get(obj_Director.grid_map, i + 5, j) == 1)
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 1) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 2) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 3) == 1) 
        and (ds_grid_get(obj_Director.grid_map, i + 5, j + 4) == 1))
        */
        
        and (spawn == true) {
        
            instance_create(((i + 1) * global.level_maker_speed), (j * global.level_maker_speed), obj_Rat_Head);
            spawn = false;
            
        }
    }
}

/*
//Enemy Generation
for (i = 0; i &lt; obj_Director.grid_width; i += 1) {

    for (j = 0; j &lt; obj_Director.grid_height; j += 1) {
        
        //randomize();
        enemy_spawn_chance = irandom(1000); 
        
        if (ds_grid_get(obj_Director.grid_map, i, j) == 1) {
            
            if (enemy_spawn_chance &lt;= 50) {
        
                instance_create((i * global.level_maker_speed) + 32, (j * global.level_maker_speed) + 32, obj_Lightning_Bug);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
