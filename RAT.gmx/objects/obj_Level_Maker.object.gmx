<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

//Time allowed to generate the level
generation_time = 1800;

//Time until it changes directions
direction_change = irandom(30) + 10;

//Speed of the level maker, has to be same as grid width (64 for now) 
//so it can the objects can be aligned
level_maker_speed = 64;

//Probability of carving a room
room_chance = 0;

//Rooms width while generating (not actual level but rooms within level)
generated_room_width = noone;//choose(2, 3, 4, 5);

//Rooms height while generating (not actual level but rooms within level)
generated_room_height = noone;//choose(2, 3, 4, 5);

//Floor for the level
level_floor = obj_Concrete_Floor;

//Wall for the level
level_wall = obj_Wall_Lab;

//Preventing the spawn of another level maker, will be used later
spawn_level_maker = 1;

//Preventing the spawn of another level maker, will be used later
spawn_level_maker_chance = 1;

//Half of the width to prevent the level maker from going to the edges of the level
half_width = view_wview[1]/2;

//Half of the height to prevent the level maker from going to the edges of the level
half_height = view_hview[1]/2;

//Open room where the player can spawn safely, its where the level maker first spawns
for (i =- 1; i &lt;= 1; i += 1) {

    for (j =- 1; j &lt;= 1; j += 1) {//Prevents player from being spawn in a wall
    
        instance_create(x + (i * level_maker_speed), y + (j * level_maker_speed), level_floor);
    }
}

////////////////////////////////////////////////////////////////////////////////

//Commencing level generation

//Level maker chooses a direction
level_maker_direction = choose(0, 90, 180, 270);

//Level maker goes in choosen direction and at a pre-determined speed
motion_set(level_maker_direction, level_maker_speed);

//When the alarm is finished, the level maker will be destroyed, ceasing level generation
alarm[0] = generation_time;

//When the alarm is finished, it will choose again from the four directions and move that way
//Also can reset itself so its self-perpetuating
alarm[1] = direction_change;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(obj_Level_Maker) == 1) { //If this is the last level maker
    
    //instance_create(x, y, obj_Server);
    scr_level_walls(level_floor, level_maker_speed, level_wall);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
//Commencing level generation (same as creation event)

//Level maker chooses a direction
level_maker_direction = choose(0, 90, 180, 270);

//Level maker goes in choosen direction and at a pre-determined speed
motion_set(level_maker_direction, level_maker_speed);

//Time until it changes directions
direction_change = irandom(30) + 10;

//When the alarm is finished, it will choose again from the four directions and move that way
//Also can reset itself so its self-perpetuating
alarm[1] = direction_change;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

//Create a floor at every step it takes
instance_create(x + level_maker_speed, y + level_maker_speed, level_floor);

//Takes into account the number of level makers, it will be implemented so that the more
//there is, the less likely more are to be spawned
spawn_level_maker = instance_number(obj_Level_Maker);

//Chances to spawn a new level maker, the higher it is, the lower the chance
spawn_level_maker_chance = irandom(1000 * (spawn_level_maker + 1));

if (spawn_level_maker_chance == 0) {
    
    //instance_create(x, y, obj_Level_Maker);
}

//Chance to spawn a new room
room_chance = irandom(25);

if (room_chance == 0) {
    
    //Rooms new width
    generated_room_width = 1 //choose(1, 2, 3);
    
    //Rooms new height
    generated_room_height = 1 //choose(1, 2, 3);
    
    //For loop to generate different sized rooms
    for (i =- generated_room_width; i &lt;= generated_room_width; i += generated_room_width) {
    
        for (j =- generated_room_height; j &lt;= generated_room_height; j += generated_room_height) {
        
            instance_create(x + (i * level_maker_speed), y + (j * level_maker_speed), level_floor);
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//Limiting level maker's movement

//Keeps the level generator from moving too close to the right side of the room
x = min(x, room_width - half_width); //x, 2560 - 320

//Keeps the level generator from moving too close to the left side of the room
x = max(half_width, x); //320, x

//Keeps the level generator from moving too close to the botoom of the room
y = min(y, room_height - (half_height + 16)); //y, 1920 - 240

//Keeps the level generator from moving too close to the top of the room
y = max((half_height + 16), y); //240, y
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
