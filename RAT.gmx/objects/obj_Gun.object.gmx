<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr_Gun_Left = noone;

spr_Gun_Right = noone;

gun_picked_up = noone;

//global.gun_pick_up = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (global.gun_collision == true) {
    if mouse_check_button(mb_left) and (potato_gun_bullet_timer == true) and ((global.weapon_attach_right_arm == true) or (global.weapon_attach_left_arm == true)) and (global.gun_pick_up == true) {
            
        object_bullet = instance_create(x,y,obj_Potato_Bullet);
        object_bullet.direction = point_direction(obj_Rat_Head.x, obj_Rat_Head.y, mouse_x, mouse_y);
        object_bullet.speed = 10;
        potato_gun_bullet_timer = false;
        timer++;
    }
}

if (timer = 10) {
    potato_gun_bullet_timer = true;
}
*/

////////////////////////////////////////////////////////////////////Weilding guns////////////////////////////////////////////////////////////////////
if (global.gun_collision == true) {//and (global.gun_2_collision == false) {

    if (global.weapon_attach_left_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            (sprite_index = spr_Body_Standard_Walking_Down_Left) and
            ((obj_Gun.sprite_index = spr_Gun_Left) or
            (obj_Gun.sprite_index = spr_Gun_Right))) {
            
            obj_Gun.x = obj_Rat_Front_Arm.x;
            obj_Gun.y = obj_Rat_Front_Arm.y;
            
            obj_Gun.sprite_index = spr_Gun_Left;
            global.weapon_attach_left_arm = true;
            global.weapon_picked_up = true;
            global.gun_pick_up = true;
        }
    }
    
    if (global.weapon_attach_right_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            (sprite_index = spr_Body_Standard_Walking_Down_Right) and
            ((obj_Gun.sprite_index = spr_Gun_Left) or
            (obj_Gun.sprite_index = spr_Gun_Right))) {
        
            obj_Gun.x = obj_Rat_Front_Arm.x;
            obj_Gun.y = obj_Rat_Front_Arm.y;
        
            obj_Gun.sprite_index = spr_Gun_Right;
            global.weapon_attach_right_arm = true;
            global.weapon_picked_up = true;
            global.gun_pick_up = true;
        }
    }
    
    if (global.weapon_attach_left_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            ((sprite_index = spr_Body_Standard_Walking_Up_Left)) and
            ((obj_Gun.sprite_index = spr_Gun_Left) or
            (obj_Gun.sprite_index = spr_Gun_Right))) {
        
            obj_Gun.x = obj_Rat_Front_Arm.x;
            obj_Gun.y = obj_Rat_Front_Arm.y;
        
            obj_Gun.sprite_index = spr_Gun_Left;
            global.weapon_attach_left_arm = true;
            global.weapon_picked_up = true;
            global.gun_pick_up = true;
        }
    }
    
    if (global.weapon_attach_right_arm == false) and (global.weapon_picked_up == false) {
        if (//Walking Animation
            ((sprite_index = spr_Body_Standard_Walking_Up_Right)) and
            ((obj_Gun.sprite_index = spr_Gun_Left) or
            (obj_Gun.sprite_index = spr_Gun_Right))) {
        
            obj_Gun.x = obj_Rat_Front_Arm.x;
            obj_Gun.y = obj_Rat_Front_Arm.y;
        
            obj_Gun.sprite_index = spr_Gun_Right;
            global.weapon_attach_right_arm = true;
            global.weapon_picked_up = true;
            global.gun_pick_up = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Rat_Body">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.gun_collision = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
